data <- fetch(resultadoDaConsulta, n=1000)
summary(data)
data_train <- data[1:699,]
data_test <- data[700:1000,]
data_train_labels <- data[1:699,1]
data_test_labels <- data[700:1000,1]
library(kernlab)
install.packages("kernlab")
library(kernlab)
data_test_pred <- ksvm(P_ID ~ ., data = data_train, kernel = "vanilladot")
summary(data)
library(RMySQL)
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQuery <- "SELECT * FROM software.PATCHES;"
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=1000)
summary(data)
data_train <- data[1:699,]
data_test <- data[700:1000,]
data_train_labels <- data[1:699,1]
data_test_labels <- data[700:1000,1]
library(kernlab)
data_test_pred <- ksvm(P_ID ~ ., data = data_train, kernel = "vanilladot")
data_test_pred
data_predictions <- predict(data_test_pred, data_test)
table(data_predictions, data_test$P_ID)
library(gmodels)
CrossTable(x = data_test_labels, y = data_predictions, prop.chisq=FALSE)
huh <- dbHasCompleted(rs)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
dbDisconnect(con)
on.exit(dbDisconnect(con))
library(RMySQL)
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQuery <- "SELECT * FROM software.PATCHES;"
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=1000)
summary(data)
data_train <- data[1:699,]
data_test <- data[700:1000,]
data_train_labels <- data[1:699,1]
data_test_labels <- data[700:1000,1]
library(kernlab)
data_test_pred <- ksvm(P_ID ~ ., data = data_train, kernel = "vanilladot")
data_test_pred
data_test_pred <- ksvm(P_ID ~ ., data = data_train, kernel = "vanilladot")
data_test_pred
View(data)
View(data_test)
View(data_train)
library(RMySQL)
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
resultadoDaConsulta <- dbSendQuery(con, stringQueryVULNERABILITIES)
data <- fetch(resultadoDaConsulta, n=1000)
summary(data)
tabela(data$V_CLASSIFICATION)
summary(data)
tabela(data$V_CLASSIFICATION)
table(data$V_CLASSIFICATION)
tiposDeVunerabilidades <- table(data$V_CLASSIFICATION)
tiposDeVunerabilidades
summary(tiposDeVunerabilidades)
https://eden.dei.uc.pt/%20nmsa/metrics-dataset
library(RMySQL)
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryFUNCTIONS_1_mozilla <- "SELECT * FROM software.FUNCTIONS_1_mozilla;"
resultadoDaConsulta <- dbSendQuery(con, stringQueryFUNCTIONS_1_mozilla)
data <- fetch(resultadoDaConsulta, n=1000)
tiposDeVunerabilidades <- table(data$V_CLASSIFICATION)
tiposDeVunerabilidades
tiposDeVunerabilidades <- table(data$Affected)
tiposDeVunerabilidades
View(data)
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryJoinPATCHESWithVULNERABILITIES <- "SELECT * FROM software.PATCHES join software.VULNERABILITIES ON software.PATCHES.V_ID = software.VULNERABILITIES.V_ID;"
stringQueryCountJoinFUNCTIONS_2_kernelWithPATCHES <- "SELECT count(*) FROM software.FUNCTIONS_2_kernel join software.PATCHES on software.FUNCTIONS_2_kernel.P_ID = software.PATCHES.P_ID;"
stringQueryJoinFUNCTIONS_2_kernelWithPATCHES <- "SELECT * FROM software.FUNCTIONS_2_kernel join software.PATCHES on software.FUNCTIONS_2_kernel.P_ID = software.PATCHES.P_ID;"
numeroLinhasPATCHES <- as.numeric(consultaBD(con, stringQueryCountJoinFUNCTIONS_2_kernelWithPATCHES, 1))
numeroLinhasPATCHES
dataPATCHES <- consultaBD(con, stringQueryJoinFUNCTIONS_2_kernelWithPATCHES, numeroLinhasPATCHES)
dataPATCHES
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
summary(data)
table(data$V_ID)
table(data$V_CLASSIFICATION)
View(data)
data <- data[-1:-12]
View(data)
head(data)
table(data$V_CLASSIFICATION)
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
head(data)
table(data$V_CLASSIFICATION)
levels <- c("BPRS", "DOS", "DOS_GP", "DOS_OF_BPRS", "GP", "OI", "BPRS_OI", "DOS_EC", "DOS_OF", "DOS_OF_GP", "GP_BPRS", "U")
labels <- c(">Bypassarestrictionorsimilar<", ">DenialOfService<", ">DenialOfService<>Gainprivileges<", ">DenialOfService<>Overflow<>Bypassarestrictionorsimilar<", ">Gainprivileges<", ">ObtainInformation<", ">Bypassarestrictionorsimilar<>ObtainInformation<", ">DenialOfService<>ExecuteCode<", ">DenialOfService<>Overflow<", ">DenialOfService<>Overflow<>Gainprivileges<", ">Gainprivileges<>Bypassarestrictionorsimilar<", "Undefined")
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = levels, labels = labels)
View(data)
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
View(data)
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
head(data)
table(data$V_CLASSIFICATION)
levels <- c("BPRS", "DOS", "DOS_GP", "DOS_OF_BPRS", "GP", "OI", "BPRS_OI", "DOS_EC", "DOS_OF", "DOS_OF_GP", "GP_BPRS", "U")
labels <- c(">Bypassarestrictionorsimilar<", ">DenialOfService<", ">DenialOfService<>Gainprivileges<", ">DenialOfService<>Overflow<>Bypassarestrictionorsimilar<", ">Gainprivileges<", ">ObtainInformation<", ">Bypassarestrictionorsimilar<>ObtainInformation<", ">DenialOfService<>ExecuteCode<", ">DenialOfService<>Overflow<", ">DenialOfService<>Overflow<>Gainprivileges<", ">Gainprivileges<>Bypassarestrictionorsimilar<", "Undefined")
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = levels, labels = labels)
fecharConnBD(con)
data
count.fields(levels)
length(levels)
length(labels)
View(data)
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = levels)
data
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
head(data)
table(data$V_CLASSIFICATION)
levels <- c("BPRS", "DOS", "DOS_GP", "DOS_OF_BPRS", "GP", "OI", "BPRS_OI", "DOS_EC", "DOS_OF", "DOS_OF_GP", "GP_BPRS", "U")
labels <- c(">Bypassarestrictionorsimilar<", ">DenialOfService<", ">DenialOfService<>Gainprivileges<", ">DenialOfService<>Overflow<>Bypassarestrictionorsimilar<", ">Gainprivileges<", ">ObtainInformation<", ">Bypassarestrictionorsimilar<>ObtainInformation<", ">DenialOfService<>ExecuteCode<", ">DenialOfService<>Overflow<", ">DenialOfService<>Overflow<>Gainprivileges<", ">Gainprivileges<>Bypassarestrictionorsimilar<", "Undefined")
length(levels)
length(labels)
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = levels)
data
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = labels)
data
length(labels)
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION, levels = labels)
data
data <- data[-1:-12]
head(data)
data$V_CLASSIFICATION<- factor(data$V_CLASSIFICATION)
data
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
data
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
head(data)
ls.str(data)
levels(data$V_CLASSIFICATION)
table(data$V_CLASSIFICATION)
levels(data$V_CLASSIFICAT)
ls.str(data)
levels(data$V_CLASSIFICATION)
summary(data$V_CLASSIFICATION)
data$V_CLASSIFICATION <- factor(data$V_CLASSIFICATION)
ls.str(data)
levels(data$V_CLASSIFICATION)
summary(data$V_CLASSIFICATION)
table(data$V_CLASSIFICATION)
data$V_CLASSIFICATION <- factor(data$V_CLASSIFICATION)
data
library(RMySQL)
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
head(data)
ls.str(data)
levels(data$V_CLASSIFICATION)
summary(data$V_CLASSIFICATION)
table(data$V_CLASSIFICATION)
data$V_CLASSIFICATION <- factor(data$V_CLASSIFICATION)
data
head(data)
ls.str(data)
levels(data$V_CLASSIFICATION)
summary(data$V_CLASSIFICATION)
splitDatesInTrainAndTest <- function(data){
#Separando base de trainamento e teste
indexData <- sample.split(data,SplitRatio=.7)
trainset <- data[indexData==TRUE,]
testset <- data[indexData==FALSE,]
return(list(trainset, testset))
}
splitDatesInTrainAndTest <- function(data){
#Separando base de trainamento e teste
indexData <- sample.split(data,SplitRatio=.7)
trainSet <- data[indexData==TRUE,]
testSet <- data[indexData==FALSE,]
return(list(trainSet, testSet))
}
head(data)
ls.str(data)
setTrainAndTest <- splitDatesInTrainAndTest(data)
library(caTools)
splitDatesInTrainAndTest <- function(data){
#Separando base de trainamento e teste
indexData <- sample.split(data,SplitRatio=.7)
trainSet <- data[indexData==TRUE,]
testSet <- data[indexData==FALSE,]
return(list(trainSet, testSet))
}
setTrainAndTest <- splitDatesInTrainAndTest(data)
trainSet <- setTrainAndTest[1]
testSet <- setTrainAndTest[2]
trainSet
testSet
length(trainSet)
length(testSet)
dir(data)
dir(data)
dim(data)
labelTrainSet <- setTrainAndTest[1,29]
trainSet <- as.data.frame(setTrainAndTest[1])
testSet <- as.data.frame(setTrainAndTest[2])
trainSet
data$V_CLASSIFICATION <- factor(data$V_CLASSIFICATION)
head(data)
ls.str(data)
setTrainAndTest <- splitDatesInTrainAndTest(data)
trainSet <- as.data.frame(setTrainAndTest[1])
testSet <- as.data.frame(setTrainAndTest[2])
labelTrainSet <- trainSet[1,29]
labelTestSet <- trainSet[2,29]
labelTrainSet
labelTestSet
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 12)
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 12)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 21)
length(labelTrainSet)
labelTrainSet <- as.data.frame(trainSet[1,29])
length(labelTrainSet)
labelTestSet <- as.data.frame(trainSet[2,29])
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 21)
labelTrainSet <- as.data.frame(trainSet[,29])
length(labelTrainSet)
labelTestSet <- as.data.frame(trainSet[,29])
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 21)
fecharConnBD(con)
dir(trainSet)
setTrainAndTest <- splitDatesInTrainAndTest(data)
trainSet <- as.data.frame(setTrainAndTest[1])
dir(trainSet)
dim(trainSet)
testSet <- as.data.frame(setTrainAndTest[2])
dim(testSet)
dim(testSet)
labelTrainSet <- as.data.frame(trainSet[32,29])
length(labelTrainSet)
labelTrainSet <- trainSet[32,29]
labelTrainSet
labelTrainSet <- trainSet[1:32,29]
length(labelTrainSet)
labelTrainSet
labelTestSet <- as.data.frame(trainSet[1:14,29])
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 21)
labelTrainSet <- trainSet[1:32,29]
labelTestSet <- as.data.frame(trainSet[1:14,29])
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 12)
labelTrainSet
library(RMySQL)
library(caTools)
splitDatesInTrainAndTest <- function(data){
#Separando base de trainamento e teste
indexData <- sample.split(data,SplitRatio=.7)
trainSet <- data[indexData==TRUE,]
testSet <- data[indexData==FALSE,]
return(list(trainSet, testSet))
}
limparConsultaBD <- function(rs){
dbHasCompleted(rs)
dbClearResult(rs)
}
fecharConnBD <- function(con){
dbDisconnect(con)
on.exit(dbDisconnect(con))
}
consultaBD <- function(con, stringQuery, numeroDeLinhasNoResultado){
resultadoDaConsulta <- dbSendQuery(con, stringQuery)
data <- fetch(resultadoDaConsulta, n=numeroDeLinhasNoResultado)
limparConsultaBD(resultadoDaConsulta)
return(data)
}
con <- dbConnect(MySQL(),
user="root", password="12345",
dbname="software", host="localhost")
stringQueryCountPATCHES <- "SELECT COUNT(*) FROM software.PATCHES;"
stringQueryPATCHES <- "SELECT * FROM software.PATCHES;"
stringQueryVULNERABILITIES <- "SELECT * FROM software.VULNERABILITIES;"
stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT count(*) FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
stringQueryViewFUNC_2_kernel_V_CLASSIFICATION <- "SELECT * FROM software.viewFUNC_2_kernel_V_CLASSIFICATION;"
numeroLinhas <- as.numeric(consultaBD(con, stringQueryCountViewFUNC_2_kernel_V_CLASSIFICATION, 1))
numeroLinhas
data <- consultaBD(con, stringQueryViewFUNC_2_kernel_V_CLASSIFICATION, numeroLinhas)
data
summary(data)
table(data$V_CLASSIFICATION)
data <- data[-1:-12]
dim(data)
head(data)
ls.str(data)
levels(data$V_CLASSIFICATION)
summary(data$V_CLASSIFICATION)
table(data$V_CLASSIFICATION)
data$V_CLASSIFICATION <- factor(data$V_CLASSIFICATION)
head(data)
ls.str(data)
setTrainAndTest <- splitDatesInTrainAndTest(data)
trainSet <- as.data.frame(setTrainAndTest[1])
dim(trainSet)
testSet <- as.data.frame(setTrainAndTest[2])
dim(testSet)
labelTrainSet <- trainSet[1:33,29]
labelTestSet <- as.data.frame(trainSet[1:13,29])
library(class)
predictData <- knn(train = trainSet, test = testSet, cl = labelTrainSet, k = 12)
workSpace <- setwd("/home/danilo/R/workspace/projetoMaquiagem/")
dataMedidasRosto <- read.csv("medidasRosto.csv", stringsAsFactors = TRUE)
library(scatterplot3d)
dataMedidasRosto$Colour="black"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="alongado"]="red"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="oval"]="blue"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="quadrado"]="green"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="redondo"]="pink"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="triangular"]="orange"
dataMedidasRosto
scatterplot3d(dataMedidasRosto$larguraTesta,dataMedidasRosto$larguraMacaDoRosto,dataMedidasRosto$larguraMandibula, main="Medidas do rosto", pch=16, color = dataMedidasRosto$Colour)
library(rgl)
plot3d(dataMedidasRosto$larguraTesta,dataMedidasRosto$larguraMacaDoRosto,dataMedidasRosto$larguraMandibula, main="Medidas do rosto", size=3, col = dataMedidasRosto$Colour)
plot3d(dataMedidasRosto$larguraTesta,dataMedidasRosto$larguraMacaDoRosto,dataMedidasRosto$larguraMandibula, main="Medidas do rosto", size=3, col = dataMedidasRosto$Colour)
workSpace <- setwd("/home/danilo/R/workspace/projetoMaquiagem/")
dataMedidasRosto <- read.csv("medidasRosto.csv", stringsAsFactors = TRUE)
library(scatterplot3d)
larguraTesta <- dataMedidasRosto$larguraTesta
larguraMacaDoRosto <- dataMedidasRosto$larguraMacaDoRosto
larguraMandibula <- dataMedidasRosto$larguraMandibula
dataMedidasRosto$Colour="black"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="alongado"]="red"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="oval"]="blue"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="quadrado"]="green"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="redondo"]="pink"
dataMedidasRosto$Colour[dataMedidasRosto$tipo=="triangular"]="orange"
dataMedidasRosto
scatterplot3d(larguraTesta,larguraMacaDoRosto,larguraMandibula, main="Medidas do rosto", pch=16, color = dataMedidasRosto$Colour)
library(rgl)
plot3d(larguraTesta,larguraMacaDoRosto,larguraMandibula, main="Medidas do rosto", size=3, col = dataMedidasRosto$Colour)
plot3d(larguraTesta,larguraMacaDoRosto,larguraMandibula, main="", size=3, col = dataMedidasRosto$Colour)
